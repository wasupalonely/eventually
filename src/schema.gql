# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Invitation {
  id: ID!
  event: Event!
  guest: Guest!
  invitationStatus: InvitationStatus!
  expirationDate: DateTime
  qrCodeUrl: String!
  confirmationUrl: String!
  createdAt: DateTime!
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Guest {
  id: ID!
  name: String!
  email: String
  phoneNumber: String
  invitations: [Invitation!]!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  roles: [String!]!
  isActive: Boolean!
  eventsCreated: [Event!]!
  guests: [Guest!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Event {
  id: ID!
  name: String!
  description: String!
  type: EventType!
  location: String
  url: String
  startDate: DateTime!
  endDate: DateTime!
  createdBy: User!
  invitations: [Invitation!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventType {
  VIRTUAL
  IN_PERSON
  HYBRID
}

type SendInvitationsResponse {
  eventId: String!
  notifiedGuests: [String!]!
}

type Query {
  events(eventType: EventType): [Event!]!
  eventsByUser(eventType: EventType): [Event!]!
  event(id: ID!): Event!
  users(roles: [ValidRoles!] = []): [User!]!
  user(id: ID!): User!
  guests: [Guest!]!
  myGuests: [Guest!]!
  guest(id: ID!): Guest!
  invitations(id: ID): [Invitation!]!
  invitation(id: ID!): Invitation!
}

enum ValidRoles {
  admin
  user
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  updateUser(updateUserInput: UpdateUserInput!): User!
  blockUser(id: ID!): User!
  createGuest(createGuestInput: CreateGuestInput!): Guest!
  updateGuest(updateGuestInput: UpdateGuestInput!): Guest!
  removeGuest(id: ID!): Guest!
  createInvitation(createInvitationInput: CreateInvitationInput!): Invitation!
  sendInvitations(sendInvitationInput: SendInvitationInput!): SendInvitationsResponse!
  updateInvitation(updateInvitationInput: UpdateInvitationInput!): Invitation!
  removeInvitation(id: ID!): Invitation!
}

input CreateEventInput {
  name: String!
  description: String
  type: EventType!
  location: String
  url: String
  startDate: DateTime!
  endDate: DateTime!
}

input UpdateEventInput {
  name: String
  description: String
  type: EventType
  location: String
  url: String
  startDate: DateTime
  endDate: DateTime
  id: ID!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  id: ID!
  roles: [ValidRoles!]
  isActive: Boolean
}

input CreateGuestInput {
  """Name of the guest"""
  name: String!
  email: String
  phoneNumber: String
}

input UpdateGuestInput {
  """Name of the guest"""
  name: String
  email: String
  phoneNumber: String
  id: ID!
}

input CreateInvitationInput {
  eventId: String!
  guestId: String!
}

input SendInvitationInput {
  """
  Guest IDs to send invitations (If is not sent will sen d invitation to every person invitated in that event)
  """
  guestIds: [String!]

  """Event ID"""
  eventId: String!
}

input UpdateInvitationInput {
  eventId: String
  guestId: String
  id: ID!
}